terraform init --- Initialize working directory (with .terraform folder) that contains terraform configuration file(i.e; *.tf)
terraform validate --- verifies if a configuration is syntactically correct and internally consistent
terraform fmt --- formats the configuration file in canonical format
terraform plan --- creates an execution plan, which lets us preview the changes
terraform plan -out <fileName> --- -out=FILE option to save the generated plan to a file on disk, which you can later execute by passing the file to terraform apply as an extra argument.
terraform apply --- executes the action proposed in Terraform plan
terraform apply "<fileName>"
terraform apply -auto-approve --- does not asks for confirmation
terraform destroy --- delete/destroy all remote objects managed by a particular Terraform configuration.
terraform plan -destroy -out "<destroy_plan FileName>"
terraform destroy -target "PROVIDER.RESOURCE_TYPE.RESOURCE_NAME.ATTRIBUTE" --- destroy a particular object
terraform show --- human-readable output from a state or plan file.
terraform state list --- command is used to list resources within a Terraform state
---------------------------------------------------------------------------------------------------------------------------
terraform import <resource name> <resource id>
--- <resource id> is created outside of terraform and will be part of terraform as resource name before apply
#eg; terraform import aws_instance.example2 i-075f0c2681a91c883
----------------------------------------------------------------------------------------------------------------------------
tf plan&apply -var "varName=value" -- single value variable
tf plan&apply -var 'varName="<value>"]' -- array/list value variables
tf plan&apply -var 'varName={"key=value"}' -- map value variables
#eg; terraform apply -var="image_id=ami-abc123"
#eg; terraform apply -var='image_id_list=["ami-abc123","ami-def456"]' -var="instance_type=t2.micro"
#eg; terraform apply -var='image_id_map={"us-east-1":"ami-abc123","us-east-2":"ami-def456"}'

*.tfvars if we need to store variables in a separate file

terraform plan/apply/destroy -var-file=variable.tfvars
----------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------
Blocks

provider
resource
data
backend
variable
output
module
